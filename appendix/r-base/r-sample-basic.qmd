---
title: "Randomizing Treatments in R Using `sample()`"
author: Davood Tofighi, Ph.D.
execute: 
  eval: true
  echo: true
  error: false
---


## **Function Description**
The `sample()` function operates on vectors or integers and uses random number generation to produce randomized output.

### **Key Arguments**
1. **`x`**:
   - A vector of elements to sample from.
   - If `x` is a single positive integer, `sample()` assumes `x` as `1:x` (i.e., the sequence from 1 to `x`).

2. **`size`**:
   - Specifies the number of elements to sample. Default is the length of `x` (i.e., it permutes the entire input if `size` is not specified).

3. **`replace`**:
   - Logical, determines if sampling is with replacement (`TRUE`) or without replacement (`FALSE`).
   - Default: `FALSE`.

4. **`prob`**:
   - A vector of weights for sampling probabilities. Weights are applied proportionally for sampling elements.
   - Default: `NULL` (uniform probabilities).

5. **`useHash`** (in `sample.int`):
   - Optimizes sampling for large datasets when `replace = FALSE`, `prob = NULL`, and `size <= n/2`.

::: {.callout-note}
If `replace = FALSE`, `size` should not exceed the length of `x`. Otherwise, an error occurs.
:::

## **Key Features**
1. **Random Permutation**:
   - If no `size` is provided and `replace = FALSE`, the function shuffles all elements of `x`:

```{r}
set.seed(42) # For reproducibility
sample(1:5)  # Outputs a random permutation, e.g., c(3, 5, 1, 4, 2)
```

2. **With Replacement**:
   - Allows sampling the same element multiple times:

```{r}
sample(1:3, size = 5, replace = TRUE)  # Outputs, e.g., c(1, 3, 2, 2, 1)
```

3. **Weighted Sampling**:
   - Sampling based on a specified probability vector:

```{r}
sample(1:3, size = 6, prob = c(0.1, 0.7, 0.2), replace = TRUE )  # Likely favors "2"
```

4. **Default Behavior with Single Numeric `x`**:
   - Treats `x` as `1:x`:

```{r}
sample(5)  # Equivalent to sample(1:5)
```

5. **Edge Cases**:
   - If `size = 0` and `x` is empty or has length zero, the result is a zero-length vector.
   - Non-integer `x` or `n` is truncated to the nearest smaller integer.


## **Examples**

### 1. Random Permutation

```{r}
x <- c("A", "B", "C", "D")
sample(x)  # Randomly shuffles elements, e.g., c("C", "A", "D", "B")
```

### 2. Sampling With Replacement

```{r}
sample(1:4, size = 6, replace = TRUE)
# Outputs, e.g., c(2, 4, 1, 3, 2, 4)
```

### 3. Weighted Sampling

```{r}
sample(letters[1:5], size = 5, prob = c(0.5, 0.2, 0.1, 0.1, 0.1), replace = TRUE)
# Heavily favors "a" in the output
```

### 4. Default Behavior for Single Integer

```{r}
sample(5)  # Equivalent to sample(1:5)
```

### 5. Safeguarding Edge Cases with `sample.int`

```{r}
# Programmatically handle edge cases for length(x) > 1:
resample <- function(x, ...) x[sample.int(length(x), ...)]

x <- 1:10
resample(x[x > 8])   # Properly handles cases where x has length < 2
resample(x[x > 10])  # Returns an empty vector safely
```

## **Best Practices**

1. **Reproducibility**: Use `set.seed()` to ensure reproducible randomization:

```{r}
set.seed(42)
sample(1:5)
```

2. **Edge Cases**: Use `sample.int` for numeric sequences, especially in programmatic contexts, to avoid surprises with default `sample()` behavior.

3. **Weight Verification**: Ensure that weights in `prob` are non-negative and not all zero.

4. **Large Dataset Efficiency**: Use `useHash` (via `sample.int`) for large `n` to optimize memory and performance.
