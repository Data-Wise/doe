---
title: "Tutorial on `rep` function in R"
author: Davood Tofighi, Ph.D.
---

# Tutorial: Mastering the `rep` Function in R

## 1. Function Overview

The `rep` function in R replicates the elements of vectors. It is commonly used to:

- Repeat single values or sequences.
- Expand data sets with repetitive patterns.
- Create predictable test cases for analysis or debugging.

It is a versatile function that supports various ways to replicate elements, making it a fundamental tool in data manipulation.

## 2. Arguments Explanation

The `rep` function has the following arguments:

- **x**:
	- **Description**: The vector to be replicated.
	- **Type**: Numeric, character, logical, or any other R object.
	- **Required**: Yes.
	- **Examples**:

```{r}
rep(1:3, times = 2) # Output: 1 2 3 1 2 3
```

- **times**:
	- **Description**: Specifies the number of times to repeat each element.
	- **Type**: Numeric vector (must be non-negative integers).
	- **Default**: None; must be explicitly defined if used.
	- **Examples**:

```{r}
rep(1:3, times = c(2, 3, 1)) # Output: 1 1 2 2 2 3
```

- **each**:
	- **Description**: Specifies the number of times to repeat each element individually.
	- **Type**: Numeric scalar (non-negative integer).
	- **Default**: 1.
	- **Examples**:

```{r}
rep(1:3, each = 2) # Output: 1 1 2 2 3 3
```

- **length.out**:
	- **Description**: Specifies the total length of the resulting vector.
	- **Type**: Numeric scalar.
	- **Default**: NULL (calculated based on other arguments).
	- **Examples**:

```{r}
rep(1:3, length.out = 5) # Output: 1 2 3 1 2
```

## 3. Nuances and Advanced Features

1. **Combining `each` and `times`**:
	- When both `each` and `times` are specified, `each` operates first, followed by `times`.

```{r}
rep(1:2, each = 2, times = 2) # Output: 1 1 2 2 1 1 2 2
```

1. **Non-integer inputs**:
	- Non-integer `times`, `each`, or `length.out` values are truncated to their integer part.

```{r}
rep(1:2, times = 2.7) # Output: 1 1 2 2
```

1. **Handling NA values**:
	- Works seamlessly with vectors containing `NA`.

```{r}
rep(c(NA, 1), each = 2) # Output: NA NA 1 1
```

## 4. Examples

**Basic Usage**:

```{r}
# Repeat the sequence twice
rep(1:3, times = 2)
# Output: 1 2 3 1 2 3
```

**Using `each`**:

```{r}
# Repeat each element twice
rep(1:3, each = 2)
# Output: 1 1 2 2 3 3
```

**Custom Length**:

```{r}
# Truncate the output to a specific length
rep(1:3, length.out = 4)
# Output: 1 2 3 1
```

**Combining `each` and `times`**:

```{r}
# A complex repetition pattern
rep(1:3, each = 2, times = 3)
# Output: 1 1 2 2 3 3 1 1 2 2 3 3
```

## 5. Common Errors and Troubleshooting

1. **Negative values for `times` or `each`**:

	- Error: `Error in rep.int: invalid 'times' argument`
	- Fix: Ensure `times` and `each` are non-negative integers.

```{r}
#| echo: fenced
#| eval: false

rep(1:3, times = -1) # Error
```

1. **Mismatched lengths for `times`**:

	- The `times` vector length must match `x` or be recycled appropriately.

```{r}
#| echo: fenced
#| eval: false

rep(1:3, times = c(1, 2)) # Warning: longer object length is not a multiple of shorter object length
```
1. **Non-numeric inputs**:

	- Ensure that all arguments like `length.out`, `each`, and `times` are numeric.

```{r}
#| echo: fenced
#| eval: false
rep(1:3, times = "two") # Error
```

1. **Recycling**:
	- If `times` or `each` is shorter than `x`, it generates an error.

```{r}
#| echo: fenced
#| eval: false
rep(1:3, times = c(2, 3)) # Output: 1 1 2 2 2 3
```
